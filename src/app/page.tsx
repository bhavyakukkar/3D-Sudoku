// src/app/page.tsx

'use client';

import { useState } from 'react';
import SudokuBoard from '../components/SudokuBoard'; // 
import React from 'react';
import ThreeDSudokuView from '../components/ThreeDSudokuView'


const myPuzzles: string[][][] = [
  [
    ['1', '3', '5', '4', '8', '9', '2', '6', '7'],
    ['6', '7', '8', '1', '2', '3', '4', '5', '9'],
    ['9', '2', '4', '5', '6', '7', '1', '3', '8'],
    ['8', '1', '6', '9', '3', '2', '7', '4', '5'],
    ['2', '5', '7', '6', '4', '8', '9', '1', '3'],
    ['3', '4', '9', '7', '1', '5', '6', '8', '2'],
    ['5', '6', '2', '8', '9', '1', '3', '7', '4'],
    ['7', '9', '1', '3', '5', '4', '8', '2', '6'],
    ['4', '8', '3', '2', '7', '6', '5', '9', '1'],
  ],
  [
    ['2', '4', '6', '5', '9', '1', '3', '7', '8'],
    ['7', '8', '9', '2', '3', '4', '5', '6', '1'],
    ['1', '3', '5', '6', '7', '8', '2', '4', '9'],
    ['9', '2', '7', '1', '4', '3', '8', '5', '6'],
    ['3', '6', '8', '7', '5', '9', '1', '2', '4'],
    ['4', '5', '1', '8', '2', '6', '7', '9', '3'],
    ['6', '7', '3', '9', '1', '2', '4', '8', '5'],
    ['8', '1', '2', '4', '6', '5', '9', '3', '7'],
    ['5', '9', '4', '3', '8', '7', '6', '1', '2'],
  ],
  [
    ['3', '5', '7', '6', '1', '2', '4', '8', '9'],
    ['8', '9', '1', '3', '4', '5', '6', '7', '2'],
    ['2', '4', '6', '7', '8', '9', '3', '5', '1'],
    ['1', '3', '8', '2', '5', '4', '9', '6', '7'],
    ['4', '7', '9', '8', '6', '1', '2', '3', '5'],
    ['5', '6', '2', '9', '3', '7', '8', '1', '4'],
    ['7', '8', '4', '1', '2', '3', '5', '9', '6'],
    ['9', '2', '3', '5', '7', '6', '1', '4', '8'],
    ['6', '1', '5', '4', '9', '8', '7', '2', '3'],
  ],
  [
    ['4', '6', '8', '7', '2', '3', '5', '9', '1'],
    ['9', '1', '2', '4', '5', '6', '7', '8', '3'],
    ['3', '5', '7', '8', '9', '1', '4', '6', '2'],
    ['2', '4', '9', '3', '6', '5', '1', '7', '8'],
    ['5', '8', '1', '9', '7', '2', '3', '4', '6'],
    ['6', '7', '3', '1', '4', '8', '9', '2', '5'],
    ['8', '9', '5', '2', '3', '4', '6', '1', '7'],
    ['1', '3', '4', '6', '8', '7', '2', '5', '9'],
    ['7', '2', '6', '5', '1', '9', '8', '3', '4'],
  ],
  [
    ['5', '7', '9', '8', '3', '4', '6', '1', '2'],
    ['1', '2', '3', '5', '6', '7', '8', '9', '4'],
    ['4', '6', '8', '9', '1', '2', '5', '7', '3'],
    ['3', '5', '1', '4', '7', '6', '2', '8', '9'],
    ['6', '9', '2', '1', '8', '3', '4', '5', '7'],
    ['7', '8', '4', '2', '5', '9', '1', '3', '6'],
    ['9', '1', '6', '3', '4', '5', '7', '2', '8'],
    ['2', '4', '5', '7', '9', '8', '3', '6', '1'],
    ['8', '3', '7', '6', '2', '1', '9', '4', '5'],
  ],
  [
    ['6', '8', '1', '9', '4', '5', '7', '2', '3'],
    ['2', '3', '4', '6', '7', '8', '9', '1', '5'],
    ['5', '7', '9', '1', '2', '3', '6', '8', '4'],
    ['4', '6', '2', '5', '8', '7', '3', '9', '1'],
    ['7', '1', '3', '2', '9', '4', '5', '6', '8'],
    ['8', '9', '5', '3', '6', '1', '2', '4', '7'],
    ['1', '2', '7', '4', '5', '6', '8', '3', '9'],
    ['3', '5', '6', '8', '1', '9', '4', '7', '2'],
    ['9', '4', '8', '7', '3', '2', '1', '5', '6'],
  ],
  [
    ['7', '9', '2', '1', '5', '6', '8', '3', '4'],
    ['3', '4', '5', '7', '8', '9', '1', '2', '6'],
    ['6', '8', '1', '2', '3', '4', '7', '9', '5'],
    ['5', '7', '3', '6', '9', '8', '4', '1', '2'],
    ['8', '2', '4', '3', '1', '5', '6', '7', '9'],
    ['9', '1', '6', '4', '7', '2', '3', '5', '8'],
    ['2', '3', '8', '5', '6', '7', '9', '4', '1'],
    ['4', '6', '7', '9', '2', '1', '5', '8', '3'],
    ['1', '5', '9', '8', '4', '3', '2', '6', '7'],
  ],
  [
    ['8', '1', '3', '2', '6', '7', '9', '4', '5'],
    ['4', '5', '6', '8', '9', '1', '2', '3', '7'],
    ['7', '9', '2', '3', '4', '5', '8', '1', '6'],
    ['6', '8', '4', '7', '1', '9', '5', '2', '3'],
    ['9', '3', '5', '4', '2', '6', '7', '8', '1'],
    ['1', '2', '7', '5', '8', '3', '4', '6', '9'],
    ['3', '4', '9', '6', '7', '8', '1', '5', '2'],
    ['5', '7', '8', '1', '3', '2', '6', '9', '4'],
    ['2', '6', '1', '9', '5', '4', '3', '7', '8'],
  ],
  [
    ['9', '2', '4', '3', '7', '8', '1', '5', '6'],
    ['5', '6', '7', '9', '1', '2', '3', '4', '8'],
    ['8', '1', '3', '4', '5', '6', '9', '2', '7'],
    ['7', '9', '5', '8', '2', '1', '6', '3', '4'],
    ['1', '4', '6', '5', '3', '7', '8', '9', '2'],
    ['2', '3', '8', '6', '9', '4', '5', '7', '1'],
    ['4', '5', '1', '7', '8', '9', '2', '6', '3'],
    ['6', '8', '9', '2', '4', '3', '7', '1', '5'],
    ['3', '7', '2', '1', '6', '5', '4', '8', '9'],
  ],

  // ...Array(8).fill(null).map(() =>
  //   Array(9).fill(null).map(() => Array(9).fill(''))
  // )
];

export default function ThreeDSudoku() {
  const [cube, setCube] = useState(() =>
    myPuzzles.map(layer => layer.map(row => [...row]))
  );


  const handleCellChange = (layer: number, row: number, col: number, val: string) => {
    if (val === '' || /^[1-9]$/.test(val)) {
      const newCube = cube.map(layer => layer.map(row => [...row]));
      newCube[layer][row][col] = val;
      setCube(newCube);
    }
  };

  const isPrefilled = (layer: number, row: number, col: number) => {
    return myPuzzles[layer][row][col] !== '';
  };


  const isValid = (layer: number, row: number, col: number, val: string) => {
    if (val === '') return true;

    for (let i = 0; i < 9; i++) {
      if (i !== col && cube[layer][row][i] === val) return false;
      if (i !== row && cube[layer][i][col] === val) return false;
    }

    // ✅ Check 3x3 box in same layer
    const boxRow = Math.floor(row / 3) * 3;
    const boxCol = Math.floor(col / 3) * 3;
    for (let r = boxRow; r < boxRow + 3; r++) {
      for (let c = boxCol; c < boxCol + 3; c++) {
        if ((r !== row || c !== col) && cube[layer][r][c] === val) return false;
      }
    }

    // ✅ 3D uniqueness: Check same cell in all other layers
    for (let l = 0; l < 9; l++) {
      if (l !== layer && cube[l][row][col] === val) return false;
    }

    return true;
  };

    return (
    <div className="p-4 min-h-screen bg-white">
      <h1 className="text-2xl font-bold mb-6 text-center text-black">
        3D Sudoku
      </h1>
      <ThreeDSudokuView cube={cube} />
      <div className="flex flex-wrap justify-center gap-10 mt-10">
        {cube.map((layerBoard, layerIndex) => (
          <div key={layerIndex} className="space-y-2">
            <h2 className="text-center font-semibold text-black">
              Layer {layerIndex + 1}
            </h2>
            <SudokuBoard
              board={layerBoard}
              onChange={(row, col, val) =>
                handleCellChange(layerIndex, row, col, val)
              }
              isPrefilled={(row, col) => isPrefilled(layerIndex, row, col)}
              isValid={(row, col, val) =>
                isValid(layerIndex, row, col, val)
              }
              layer={layerIndex}
            />
          </div>
        ))}
      </div>
    </div>
  );
}
